{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";var _excluded=[\"className\",\"children\",\"classes\",\"IconComponent\",\"input\",\"inputProps\",\"variant\"],_excluded2=[\"root\"];import*as React from'react';import clsx from'clsx';import{unstable_composeClasses as composeClasses}from'@mui/base';import NativeSelectInput from'./NativeSelectInput';import formControlState from'../FormControl/formControlState';import useFormControl from'../FormControl/useFormControl';import ArrowDropDownIcon from'../internal/svg-icons/ArrowDropDown';import Input from'../Input';import useThemeProps from'../styles/useThemeProps';import{getNativeSelectUtilityClasses}from'./nativeSelectClasses';import{jsx as _jsx}from\"react/jsx-runtime\";var useUtilityClasses=function useUtilityClasses(ownerState){var classes=ownerState.classes;var slots={root:['root']};return composeClasses(slots,getNativeSelectUtilityClasses,classes);};var defaultInput=/*#__PURE__*/_jsx(Input,{});/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */var NativeSelect=/*#__PURE__*/React.forwardRef(function NativeSelect(inProps,ref){var props=useThemeProps({name:'MuiNativeSelect',props:inProps});var className=props.className,children=props.children,_props$classes=props.classes,classesProp=_props$classes===void 0?{}:_props$classes,_props$IconComponent=props.IconComponent,IconComponent=_props$IconComponent===void 0?ArrowDropDownIcon:_props$IconComponent,_props$input=props.input,input=_props$input===void 0?defaultInput:_props$input,inputProps=props.inputProps,other=_objectWithoutPropertiesLoose(props,_excluded);var muiFormControl=useFormControl();var fcs=formControlState({props:props,muiFormControl:muiFormControl,states:['variant']});var ownerState=_extends({},props,{classes:classesProp});var classes=useUtilityClasses(ownerState);var otherClasses=_objectWithoutPropertiesLoose(classesProp,_excluded2);return/*#__PURE__*/React.cloneElement(input,_extends({// Most of the logic is implemented in `NativeSelectInput`.\n// The `Select` component is a simple API wrapper to expose something better to play with.\ninputComponent:NativeSelectInput,inputProps:_extends({children:children,classes:otherClasses,IconComponent:IconComponent,variant:fcs.variant,type:undefined},inputProps,input?input.props.inputProps:{}),ref:ref},other,{className:clsx(classes.root,input.props.className,className)}));});process.env.NODE_ENV!==\"production\"?void 0:void 0;NativeSelect.muiName='Select';export default NativeSelect;","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/node_modules/@mui/material/NativeSelect/NativeSelect.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","clsx","unstable_composeClasses","composeClasses","NativeSelectInput","formControlState","useFormControl","ArrowDropDownIcon","Input","useThemeProps","getNativeSelectUtilityClasses","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","defaultInput","NativeSelect","forwardRef","inProps","ref","props","name","className","children","classesProp","IconComponent","input","inputProps","other","muiFormControl","fcs","states","otherClasses","cloneElement","inputComponent","variant","type","undefined","process","env","NODE_ENV","muiName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n      _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\n\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\n\n\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n\n  const {\n    className,\n    children,\n    classes: classesProp = {},\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n\n  return /*#__PURE__*/React.cloneElement(input, _extends({\n    // Most of the logic is implemented in `NativeSelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: NativeSelectInput,\n    inputProps: _extends({\n      children,\n      classes: otherClasses,\n      IconComponent,\n      variant: fcs.variant,\n      type: undefined\n    }, inputProps, input ? input.props.inputProps : {}),\n    ref\n  }, other, {\n    className: clsx(classes.root, input.props.className, className)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;"]},"metadata":{},"sourceType":"module"}