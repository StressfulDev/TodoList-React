{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";var _StyledInput,_StyledFilledInput;var _excluded=[\"autoWidth\",\"children\",\"classes\",\"className\",\"defaultOpen\",\"displayEmpty\",\"IconComponent\",\"id\",\"input\",\"inputProps\",\"label\",\"labelId\",\"MenuProps\",\"multiple\",\"native\",\"onClose\",\"onOpen\",\"open\",\"renderValue\",\"SelectDisplayProps\",\"variant\"];import*as React from'react';import clsx from'clsx';import{deepmerge}from'@mui/utils';import SelectInput from'./SelectInput';import formControlState from'../FormControl/formControlState';import useFormControl from'../FormControl/useFormControl';import ArrowDropDownIcon from'../internal/svg-icons/ArrowDropDown';import Input from'../Input';import NativeSelectInput from'../NativeSelect/NativeSelectInput';import FilledInput from'../FilledInput';import OutlinedInput from'../OutlinedInput';import useThemeProps from'../styles/useThemeProps';import useForkRef from'../utils/useForkRef';import styled,{rootShouldForwardProp}from'../styles/styled';import{jsx as _jsx}from\"react/jsx-runtime\";var useUtilityClasses=function useUtilityClasses(ownerState){var classes=ownerState.classes;return classes;};var styledRootConfig={name:'MuiSelect',overridesResolver:function overridesResolver(props,styles){return styles.root;},shouldForwardProp:function shouldForwardProp(prop){return rootShouldForwardProp(prop)&&prop!=='variant';},slot:'Root'};var StyledInput=styled(Input,styledRootConfig)('');var StyledOutlinedInput=styled(OutlinedInput,styledRootConfig)('');var StyledFilledInput=styled(FilledInput,styledRootConfig)('');var Select=/*#__PURE__*/React.forwardRef(function Select(inProps,ref){var props=useThemeProps({name:'MuiSelect',props:inProps});var _props$autoWidth=props.autoWidth,autoWidth=_props$autoWidth===void 0?false:_props$autoWidth,children=props.children,_props$classes=props.classes,classesProp=_props$classes===void 0?{}:_props$classes,className=props.className,_props$defaultOpen=props.defaultOpen,defaultOpen=_props$defaultOpen===void 0?false:_props$defaultOpen,_props$displayEmpty=props.displayEmpty,displayEmpty=_props$displayEmpty===void 0?false:_props$displayEmpty,_props$IconComponent=props.IconComponent,IconComponent=_props$IconComponent===void 0?ArrowDropDownIcon:_props$IconComponent,id=props.id,input=props.input,inputProps=props.inputProps,label=props.label,labelId=props.labelId,MenuProps=props.MenuProps,_props$multiple=props.multiple,multiple=_props$multiple===void 0?false:_props$multiple,_props$native=props.native,native=_props$native===void 0?false:_props$native,onClose=props.onClose,onOpen=props.onOpen,open=props.open,renderValue=props.renderValue,SelectDisplayProps=props.SelectDisplayProps,_props$variant=props.variant,variantProp=_props$variant===void 0?'outlined':_props$variant,other=_objectWithoutPropertiesLoose(props,_excluded);var inputComponent=native?NativeSelectInput:SelectInput;var muiFormControl=useFormControl();var fcs=formControlState({props:props,muiFormControl:muiFormControl,states:['variant']});var variant=fcs.variant||variantProp;var InputComponent=input||{standard:_StyledInput||(_StyledInput=/*#__PURE__*/_jsx(StyledInput,{})),outlined:/*#__PURE__*/_jsx(StyledOutlinedInput,{label:label}),filled:_StyledFilledInput||(_StyledFilledInput=/*#__PURE__*/_jsx(StyledFilledInput,{}))}[variant];var ownerState=_extends({},props,{variant:variant,classes:classesProp});var classes=useUtilityClasses(ownerState);var inputComponentRef=useForkRef(ref,InputComponent.ref);return/*#__PURE__*/React.cloneElement(InputComponent,_extends({// Most of the logic is implemented in `SelectInput`.\n// The `Select` component is a simple API wrapper to expose something better to play with.\ninputComponent:inputComponent,inputProps:_extends({children:children,IconComponent:IconComponent,variant:variant,type:undefined,// We render a select. We can ignore the type provided by the `Input`.\nmultiple:multiple},native?{id:id}:{autoWidth:autoWidth,defaultOpen:defaultOpen,displayEmpty:displayEmpty,labelId:labelId,MenuProps:MenuProps,onClose:onClose,onOpen:onOpen,open:open,renderValue:renderValue,SelectDisplayProps:_extends({id:id},SelectDisplayProps)},inputProps,{classes:inputProps?deepmerge(classes,inputProps.classes):classes},input?input.props.inputProps:{})},multiple&&native&&variant==='outlined'?{notched:true}:{},{ref:inputComponentRef,className:clsx(InputComponent.props.className,className),variant:variant},other));});process.env.NODE_ENV!==\"production\"?void 0:void 0;Select.muiName='Select';export default Select;","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/node_modules/@mui/material/Select/Select.js"],"names":["_extends","_objectWithoutPropertiesLoose","_StyledInput","_StyledFilledInput","_excluded","React","clsx","deepmerge","SelectInput","formControlState","useFormControl","ArrowDropDownIcon","Input","NativeSelectInput","FilledInput","OutlinedInput","useThemeProps","useForkRef","styled","rootShouldForwardProp","jsx","_jsx","useUtilityClasses","ownerState","classes","styledRootConfig","name","overridesResolver","props","styles","root","shouldForwardProp","prop","slot","StyledInput","StyledOutlinedInput","StyledFilledInput","Select","forwardRef","inProps","ref","autoWidth","children","classesProp","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant","variantProp","other","inputComponent","muiFormControl","fcs","states","InputComponent","standard","outlined","filled","inputComponentRef","cloneElement","type","undefined","notched","process","env","NODE_ENV","muiName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _StyledInput, _StyledFilledInput;\n\nconst _excluded = [\"autoWidth\", \"children\", \"classes\", \"className\", \"defaultOpen\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@mui/utils';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport useThemeProps from '../styles/useThemeProps';\nimport useForkRef from '../utils/useForkRef';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  return classes;\n};\n\nconst styledRootConfig = {\n  name: 'MuiSelect',\n  overridesResolver: (props, styles) => styles.root,\n  shouldForwardProp: prop => rootShouldForwardProp(prop) && prop !== 'variant',\n  slot: 'Root'\n};\nconst StyledInput = styled(Input, styledRootConfig)('');\nconst StyledOutlinedInput = styled(OutlinedInput, styledRootConfig)('');\nconst StyledFilledInput = styled(FilledInput, styledRootConfig)('');\nconst Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSelect',\n    props: inProps\n  });\n\n  const {\n    autoWidth = false,\n    children,\n    classes: classesProp = {},\n    className,\n    defaultOpen = false,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProp = 'outlined'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProp;\n  const InputComponent = input || {\n    standard: _StyledInput || (_StyledInput = /*#__PURE__*/_jsx(StyledInput, {})),\n    outlined: /*#__PURE__*/_jsx(StyledOutlinedInput, {\n      label: label\n    }),\n    filled: _StyledFilledInput || (_StyledFilledInput = /*#__PURE__*/_jsx(StyledFilledInput, {}))\n  }[variant];\n\n  const ownerState = _extends({}, props, {\n    variant,\n    classes: classesProp\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const inputComponentRef = useForkRef(ref, InputComponent.ref);\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      defaultOpen,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? deepmerge(classes, inputProps.classes) : classes\n    }, input ? input.props.inputProps : {})\n  }, multiple && native && variant === 'outlined' ? {\n    notched: true\n  } : {}, {\n    ref: inputComponentRef,\n    className: clsx(InputComponent.props.className, className),\n    variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).\n   * You can only use it when the `native` prop is `false` (default).\n   * @default false\n   */\n  defaultOpen: PropTypes.bool,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * Props applied to the [`Menu`](/material-ui/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {SelectChangeEvent<T>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default Select;"]},"metadata":{},"sourceType":"module"}