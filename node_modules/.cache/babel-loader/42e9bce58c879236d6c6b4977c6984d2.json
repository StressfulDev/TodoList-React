{"ast":null,"code":"import _toConsumableArray from\"/Users/Sintez/WebstormProjects/todolist-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */export default function createGetCssVar(){var prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';function appendVar(){for(var _len=arguments.length,vars=new Array(_len),_key=0;_key<_len;_key++){vars[_key]=arguments[_key];}if(!vars.length){return'';}var value=vars[0];if(typeof value==='string'&&!value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)){return\", var(--\".concat(prefix?\"\".concat(prefix,\"-\"):'').concat(value).concat(appendVar.apply(void 0,_toConsumableArray(vars.slice(1))),\")\");}return\", \".concat(value);}// AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\nvar getCssVar=function getCssVar(field){for(var _len2=arguments.length,vars=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){vars[_key2-1]=arguments[_key2];}return\"var(--\".concat(prefix?\"\".concat(prefix,\"-\"):'').concat(field).concat(appendVar.apply(void 0,vars),\")\");};return getCssVar;}","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/node_modules/@mui/system/esm/cssVars/createGetCssVar.js"],"names":["createGetCssVar","prefix","appendVar","vars","length","value","match","slice","getCssVar","field"],"mappings":"2IAAA;AACA;AACA;AACA,GACA,cAAe,SAASA,CAAAA,eAAT,EAAsC,IAAbC,CAAAA,MAAa,2DAAJ,EAAI,CACnD,QAASC,CAAAA,SAAT,EAA4B,+BAANC,IAAM,0CAANA,IAAM,wBAC1B,GAAI,CAACA,IAAI,CAACC,MAAV,CAAkB,CAChB,MAAO,EAAP,CACD,CAED,GAAMC,CAAAA,KAAK,CAAGF,IAAI,CAAC,CAAD,CAAlB,CAEA,GAAI,MAAOE,CAAAA,KAAP,GAAiB,QAAjB,EAA6B,CAACA,KAAK,CAACC,KAAN,CAAY,6EAAZ,CAAlC,CAA8H,CAC5H,wBAAkBL,MAAM,WAAMA,MAAN,MAAkB,EAA1C,SAA+CI,KAA/C,SAAuDH,SAAS,MAAT,2BAAaC,IAAI,CAACI,KAAL,CAAW,CAAX,CAAb,EAAvD,MACD,CAED,kBAAYF,KAAZ,EACD,CAAC;AAGF,GAAMG,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAoB,gCAATN,IAAS,2DAATA,IAAS,4BACpC,sBAAgBF,MAAM,WAAMA,MAAN,MAAkB,EAAxC,SAA6CQ,KAA7C,SAAqDP,SAAS,MAAT,QAAaC,IAAb,CAArD,MACD,CAFD,CAIA,MAAOK,CAAAA,SAAP,CACD","sourcesContent":["/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    const value = vars[0];\n\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...vars) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}"]},"metadata":{},"sourceType":"module"}