{"ast":null,"code":"import{formatMuiErrorMessage as _formatMuiErrorMessage}from\"@mui/utils\";/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */function clamp(value){var min=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var max=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;if(process.env.NODE_ENV!=='production'){if(value<min||value>max){console.error(\"MUI: The value provided \".concat(value,\" is out of range [\").concat(min,\", \").concat(max,\"].\"));}}return Math.min(Math.max(min,value),max);}/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */export function hexToRgb(color){color=color.slice(1);var re=new RegExp(\".{1,\".concat(color.length>=6?2:1,\"}\"),'g');var colors=color.match(re);if(colors&&colors[0].length===1){colors=colors.map(function(n){return n+n;});}return colors?\"rgb\".concat(colors.length===4?'a':'',\"(\").concat(colors.map(function(n,index){return index<3?parseInt(n,16):Math.round(parseInt(n,16)/255*1000)/1000;}).join(', '),\")\"):'';}function intToHex(int){var hex=int.toString(16);return hex.length===1?\"0\".concat(hex):hex;}/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */export function decomposeColor(color){// Idempotent\nif(color.type){return color;}if(color.charAt(0)==='#'){return decomposeColor(hexToRgb(color));}var marker=color.indexOf('(');var type=color.substring(0,marker);if(['rgb','rgba','hsl','hsla','color'].indexOf(type)===-1){throw new Error(process.env.NODE_ENV!==\"production\"?\"MUI: Unsupported `\".concat(color,\"` color.\\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\"):_formatMuiErrorMessage(9,color));}var values=color.substring(marker+1,color.length-1);var colorSpace;if(type==='color'){values=values.split(' ');colorSpace=values.shift();if(values.length===4&&values[3].charAt(0)==='/'){values[3]=values[3].slice(1);}if(['srgb','display-p3','a98-rgb','prophoto-rgb','rec-2020'].indexOf(colorSpace)===-1){throw new Error(process.env.NODE_ENV!==\"production\"?\"MUI: unsupported `\".concat(colorSpace,\"` color space.\\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.\"):_formatMuiErrorMessage(10,colorSpace));}}else{values=values.split(',');}values=values.map(function(value){return parseFloat(value);});return{type:type,values:values,colorSpace:colorSpace};}/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */export var colorChannel=function colorChannel(color){var decomposedColor=decomposeColor(color);return decomposedColor.values.slice(0,3).map(function(val,idx){return decomposedColor.type.indexOf('hsl')!==-1&&idx!==0?\"\".concat(val,\"%\"):val;}).join(' ');};/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */export function recomposeColor(color){var type=color.type,colorSpace=color.colorSpace;var values=color.values;if(type.indexOf('rgb')!==-1){// Only convert the first 3 values to int (i.e. not alpha)\nvalues=values.map(function(n,i){return i<3?parseInt(n,10):n;});}else if(type.indexOf('hsl')!==-1){values[1]=\"\".concat(values[1],\"%\");values[2]=\"\".concat(values[2],\"%\");}if(type.indexOf('color')!==-1){values=\"\".concat(colorSpace,\" \").concat(values.join(' '));}else{values=\"\".concat(values.join(', '));}return\"\".concat(type,\"(\").concat(values,\")\");}/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */export function rgbToHex(color){// Idempotent\nif(color.indexOf('#')===0){return color;}var _decomposeColor=decomposeColor(color),values=_decomposeColor.values;return\"#\".concat(values.map(function(n,i){return intToHex(i===3?Math.round(255*n):n);}).join(''));}/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */export function hslToRgb(color){color=decomposeColor(color);var _color=color,values=_color.values;var h=values[0];var s=values[1]/100;var l=values[2]/100;var a=s*Math.min(l,1-l);var f=function f(n){var k=arguments.length>1&&arguments[1]!==undefined?arguments[1]:(n+h/30)%12;return l-a*Math.max(Math.min(k-3,9-k,1),-1);};var type='rgb';var rgb=[Math.round(f(0)*255),Math.round(f(8)*255),Math.round(f(4)*255)];if(color.type==='hsla'){type+='a';rgb.push(values[3]);}return recomposeColor({type:type,values:rgb});}/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */export function getLuminance(color){color=decomposeColor(color);var rgb=color.type==='hsl'?decomposeColor(hslToRgb(color)).values:color.values;rgb=rgb.map(function(val){if(color.type!=='color'){val/=255;// normalized\n}return val<=0.03928?val/12.92:Math.pow((val+0.055)/1.055,2.4);});// Truncate at 3 digits\nreturn Number((0.2126*rgb[0]+0.7152*rgb[1]+0.0722*rgb[2]).toFixed(3));}/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */export function getContrastRatio(foreground,background){var lumA=getLuminance(foreground);var lumB=getLuminance(background);return(Math.max(lumA,lumB)+0.05)/(Math.min(lumA,lumB)+0.05);}/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function alpha(color,value){color=decomposeColor(color);value=clamp(value);if(color.type==='rgb'||color.type==='hsl'){color.type+='a';}if(color.type==='color'){color.values[3]=\"/\".concat(value);}else{color.values[3]=value;}return recomposeColor(color);}/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function darken(color,coefficient){color=decomposeColor(color);coefficient=clamp(coefficient);if(color.type.indexOf('hsl')!==-1){color.values[2]*=1-coefficient;}else if(color.type.indexOf('rgb')!==-1||color.type.indexOf('color')!==-1){for(var i=0;i<3;i+=1){color.values[i]*=1-coefficient;}}return recomposeColor(color);}/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function lighten(color,coefficient){color=decomposeColor(color);coefficient=clamp(coefficient);if(color.type.indexOf('hsl')!==-1){color.values[2]+=(100-color.values[2])*coefficient;}else if(color.type.indexOf('rgb')!==-1){for(var i=0;i<3;i+=1){color.values[i]+=(255-color.values[i])*coefficient;}}else if(color.type.indexOf('color')!==-1){for(var _i=0;_i<3;_i+=1){color.values[_i]+=(1-color.values[_i])*coefficient;}}return recomposeColor(color);}/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function emphasize(color){var coefficient=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.15;return getLuminance(color)>0.5?darken(color,coefficient):lighten(color,coefficient);}","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/node_modules/@mui/system/esm/colorManipulator.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","decomposeColor","type","charAt","marker","indexOf","substring","Error","values","colorSpace","split","shift","parseFloat","colorChannel","decomposedColor","val","idx","recomposeColor","i","rgbToHex","hslToRgb","h","s","l","a","f","k","rgb","push","getLuminance","Number","toFixed","getContrastRatio","foreground","background","lumA","lumB","alpha","darken","coefficient","lighten","emphasize"],"mappings":"AAAA,OAASA,qBAAqB,GAAIC,CAAAA,sBAAlC,KAAgE,YAAhE,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,KAAT,CAAeC,KAAf,CAAwC,IAAlBC,CAAAA,GAAkB,2DAAZ,CAAY,IAATC,CAAAA,GAAS,2DAAH,CAAG,CACtC,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,GAAIL,KAAK,CAAGC,GAAR,EAAeD,KAAK,CAAGE,GAA3B,CAAgC,CAC9BI,OAAO,CAACC,KAAR,mCAAyCP,KAAzC,8BAAmEC,GAAnE,cAA2EC,GAA3E,QACD,CACF,CAED,MAAOM,CAAAA,IAAI,CAACP,GAAL,CAASO,IAAI,CAACN,GAAL,CAASD,GAAT,CAAcD,KAAd,CAAT,CAA+BE,GAA/B,CAAP,CACD,CACD;AACA;AACA;AACA;AACA,GAGA,MAAO,SAASO,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CAC9BA,KAAK,CAAGA,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAR,CACA,GAAMC,CAAAA,EAAE,CAAG,GAAIC,CAAAA,MAAJ,eAAkBH,KAAK,CAACI,MAAN,EAAgB,CAAhB,CAAoB,CAApB,CAAwB,CAA1C,MAAgD,GAAhD,CAAX,CACA,GAAIC,CAAAA,MAAM,CAAGL,KAAK,CAACM,KAAN,CAAYJ,EAAZ,CAAb,CAEA,GAAIG,MAAM,EAAIA,MAAM,CAAC,CAAD,CAAN,CAAUD,MAAV,GAAqB,CAAnC,CAAsC,CACpCC,MAAM,CAAGA,MAAM,CAACE,GAAP,CAAW,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAAGA,CAAR,EAAZ,CAAT,CACD,CAED,MAAOH,CAAAA,MAAM,cAASA,MAAM,CAACD,MAAP,GAAkB,CAAlB,CAAsB,GAAtB,CAA4B,EAArC,aAA2CC,MAAM,CAACE,GAAP,CAAW,SAACC,CAAD,CAAIC,KAAJ,CAAc,CAC/E,MAAOA,CAAAA,KAAK,CAAG,CAAR,CAAYC,QAAQ,CAACF,CAAD,CAAI,EAAJ,CAApB,CAA8BV,IAAI,CAACa,KAAL,CAAWD,QAAQ,CAACF,CAAD,CAAI,EAAJ,CAAR,CAAkB,GAAlB,CAAwB,IAAnC,EAA2C,IAAhF,CACD,CAFuD,EAErDI,IAFqD,CAEhD,IAFgD,CAA3C,MAEM,EAFnB,CAGD,CAED,QAASC,CAAAA,QAAT,CAAkBC,GAAlB,CAAuB,CACrB,GAAMC,CAAAA,GAAG,CAAGD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAAZ,CACA,MAAOD,CAAAA,GAAG,CAACX,MAAJ,GAAe,CAAf,YAAuBW,GAAvB,EAA+BA,GAAtC,CACD,CACD;AACA;AACA;AACA;AACA;AACA;AACA,GAGA,MAAO,SAASE,CAAAA,cAAT,CAAwBjB,KAAxB,CAA+B,CACpC;AACA,GAAIA,KAAK,CAACkB,IAAV,CAAgB,CACd,MAAOlB,CAAAA,KAAP,CACD,CAED,GAAIA,KAAK,CAACmB,MAAN,CAAa,CAAb,IAAoB,GAAxB,CAA6B,CAC3B,MAAOF,CAAAA,cAAc,CAAClB,QAAQ,CAACC,KAAD,CAAT,CAArB,CACD,CAED,GAAMoB,CAAAA,MAAM,CAAGpB,KAAK,CAACqB,OAAN,CAAc,GAAd,CAAf,CACA,GAAMH,CAAAA,IAAI,CAAGlB,KAAK,CAACsB,SAAN,CAAgB,CAAhB,CAAmBF,MAAnB,CAAb,CAEA,GAAI,CAAC,KAAD,CAAQ,MAAR,CAAgB,KAAhB,CAAuB,MAAvB,CAA+B,OAA/B,EAAwCC,OAAxC,CAAgDH,IAAhD,IAA0D,CAAC,CAA/D,CAAkE,CAChE,KAAM,IAAIK,CAAAA,KAAJ,CAAU9B,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,6BAA8DK,KAA9D,yGAC0EZ,sBAAsB,CAAC,CAAD,CAAIY,KAAJ,CAD1G,CAAN,CAED,CAED,GAAIwB,CAAAA,MAAM,CAAGxB,KAAK,CAACsB,SAAN,CAAgBF,MAAM,CAAG,CAAzB,CAA4BpB,KAAK,CAACI,MAAN,CAAe,CAA3C,CAAb,CACA,GAAIqB,CAAAA,UAAJ,CAEA,GAAIP,IAAI,GAAK,OAAb,CAAsB,CACpBM,MAAM,CAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT,CACAD,UAAU,CAAGD,MAAM,CAACG,KAAP,EAAb,CAEA,GAAIH,MAAM,CAACpB,MAAP,GAAkB,CAAlB,EAAuBoB,MAAM,CAAC,CAAD,CAAN,CAAUL,MAAV,CAAiB,CAAjB,IAAwB,GAAnD,CAAwD,CACtDK,MAAM,CAAC,CAAD,CAAN,CAAYA,MAAM,CAAC,CAAD,CAAN,CAAUvB,KAAV,CAAgB,CAAhB,CAAZ,CACD,CAED,GAAI,CAAC,MAAD,CAAS,YAAT,CAAuB,SAAvB,CAAkC,cAAlC,CAAkD,UAAlD,EAA8DoB,OAA9D,CAAsEI,UAAtE,IAAsF,CAAC,CAA3F,CAA8F,CAC5F,KAAM,IAAIF,CAAAA,KAAJ,CAAU9B,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,6BAA8D8B,UAA9D,iHAC0ErC,sBAAsB,CAAC,EAAD,CAAKqC,UAAL,CAD1G,CAAN,CAED,CACF,CAZD,IAYO,CACLD,MAAM,CAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT,CACD,CAEDF,MAAM,CAAGA,MAAM,CAACjB,GAAP,CAAW,SAAAjB,KAAK,QAAIsC,CAAAA,UAAU,CAACtC,KAAD,CAAd,EAAhB,CAAT,CACA,MAAO,CACL4B,IAAI,CAAJA,IADK,CAELM,MAAM,CAANA,MAFK,CAGLC,UAAU,CAAVA,UAHK,CAAP,CAKD,CACD;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,IAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAA7B,KAAK,CAAI,CACnC,GAAM8B,CAAAA,eAAe,CAAGb,cAAc,CAACjB,KAAD,CAAtC,CACA,MAAO8B,CAAAA,eAAe,CAACN,MAAhB,CAAuBvB,KAAvB,CAA6B,CAA7B,CAAgC,CAAhC,EAAmCM,GAAnC,CAAuC,SAACwB,GAAD,CAAMC,GAAN,QAAcF,CAAAA,eAAe,CAACZ,IAAhB,CAAqBG,OAArB,CAA6B,KAA7B,IAAwC,CAAC,CAAzC,EAA8CW,GAAG,GAAK,CAAtD,WAA6DD,GAA7D,MAAsEA,GAApF,EAAvC,EAAgInB,IAAhI,CAAqI,GAArI,CAAP,CACD,CAHM,CAIP;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASqB,CAAAA,cAAT,CAAwBjC,KAAxB,CAA+B,CACpC,GACEkB,CAAAA,IADF,CAGIlB,KAHJ,CACEkB,IADF,CAEEO,UAFF,CAGIzB,KAHJ,CAEEyB,UAFF,CAIA,GACED,CAAAA,MADF,CAEIxB,KAFJ,CACEwB,MADF,CAIA,GAAIN,IAAI,CAACG,OAAL,CAAa,KAAb,IAAwB,CAAC,CAA7B,CAAgC,CAC9B;AACAG,MAAM,CAAGA,MAAM,CAACjB,GAAP,CAAW,SAACC,CAAD,CAAI0B,CAAJ,QAAUA,CAAAA,CAAC,CAAG,CAAJ,CAAQxB,QAAQ,CAACF,CAAD,CAAI,EAAJ,CAAhB,CAA0BA,CAApC,EAAX,CAAT,CACD,CAHD,IAGO,IAAIU,IAAI,CAACG,OAAL,CAAa,KAAb,IAAwB,CAAC,CAA7B,CAAgC,CACrCG,MAAM,CAAC,CAAD,CAAN,WAAeA,MAAM,CAAC,CAAD,CAArB,MACAA,MAAM,CAAC,CAAD,CAAN,WAAeA,MAAM,CAAC,CAAD,CAArB,MACD,CAED,GAAIN,IAAI,CAACG,OAAL,CAAa,OAAb,IAA0B,CAAC,CAA/B,CAAkC,CAChCG,MAAM,WAAMC,UAAN,aAAoBD,MAAM,CAACZ,IAAP,CAAY,GAAZ,CAApB,CAAN,CACD,CAFD,IAEO,CACLY,MAAM,WAAMA,MAAM,CAACZ,IAAP,CAAY,IAAZ,CAAN,CAAN,CACD,CAED,gBAAUM,IAAV,aAAkBM,MAAlB,MACD,CACD;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASW,CAAAA,QAAT,CAAkBnC,KAAlB,CAAyB,CAC9B;AACA,GAAIA,KAAK,CAACqB,OAAN,CAAc,GAAd,IAAuB,CAA3B,CAA8B,CAC5B,MAAOrB,CAAAA,KAAP,CACD,CAED,oBAEIiB,cAAc,CAACjB,KAAD,CAFlB,CACEwB,MADF,iBACEA,MADF,CAGA,iBAAWA,MAAM,CAACjB,GAAP,CAAW,SAACC,CAAD,CAAI0B,CAAJ,QAAUrB,CAAAA,QAAQ,CAACqB,CAAC,GAAK,CAAN,CAAUpC,IAAI,CAACa,KAAL,CAAW,IAAMH,CAAjB,CAAV,CAAgCA,CAAjC,CAAlB,EAAX,EAAkEI,IAAlE,CAAuE,EAAvE,CAAX,EACD,CACD;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASwB,CAAAA,QAAT,CAAkBpC,KAAlB,CAAyB,CAC9BA,KAAK,CAAGiB,cAAc,CAACjB,KAAD,CAAtB,CACA,WAEIA,KAFJ,CACEwB,MADF,QACEA,MADF,CAGA,GAAMa,CAAAA,CAAC,CAAGb,MAAM,CAAC,CAAD,CAAhB,CACA,GAAMc,CAAAA,CAAC,CAAGd,MAAM,CAAC,CAAD,CAAN,CAAY,GAAtB,CACA,GAAMe,CAAAA,CAAC,CAAGf,MAAM,CAAC,CAAD,CAAN,CAAY,GAAtB,CACA,GAAMgB,CAAAA,CAAC,CAAGF,CAAC,CAAGxC,IAAI,CAACP,GAAL,CAASgD,CAAT,CAAY,EAAIA,CAAhB,CAAd,CAEA,GAAME,CAAAA,CAAC,CAAG,QAAJA,CAAAA,CAAI,CAACjC,CAAD,KAAIkC,CAAAA,CAAJ,2DAAQ,CAAClC,CAAC,CAAG6B,CAAC,CAAG,EAAT,EAAe,EAAvB,OAA8BE,CAAAA,CAAC,CAAGC,CAAC,CAAG1C,IAAI,CAACN,GAAL,CAASM,IAAI,CAACP,GAAL,CAASmD,CAAC,CAAG,CAAb,CAAgB,EAAIA,CAApB,CAAuB,CAAvB,CAAT,CAAoC,CAAC,CAArC,CAAtC,EAAV,CAEA,GAAIxB,CAAAA,IAAI,CAAG,KAAX,CACA,GAAMyB,CAAAA,GAAG,CAAG,CAAC7C,IAAI,CAACa,KAAL,CAAW8B,CAAC,CAAC,CAAD,CAAD,CAAO,GAAlB,CAAD,CAAyB3C,IAAI,CAACa,KAAL,CAAW8B,CAAC,CAAC,CAAD,CAAD,CAAO,GAAlB,CAAzB,CAAiD3C,IAAI,CAACa,KAAL,CAAW8B,CAAC,CAAC,CAAD,CAAD,CAAO,GAAlB,CAAjD,CAAZ,CAEA,GAAIzC,KAAK,CAACkB,IAAN,GAAe,MAAnB,CAA2B,CACzBA,IAAI,EAAI,GAAR,CACAyB,GAAG,CAACC,IAAJ,CAASpB,MAAM,CAAC,CAAD,CAAf,EACD,CAED,MAAOS,CAAAA,cAAc,CAAC,CACpBf,IAAI,CAAJA,IADoB,CAEpBM,MAAM,CAAEmB,GAFY,CAAD,CAArB,CAID,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASE,CAAAA,YAAT,CAAsB7C,KAAtB,CAA6B,CAClCA,KAAK,CAAGiB,cAAc,CAACjB,KAAD,CAAtB,CACA,GAAI2C,CAAAA,GAAG,CAAG3C,KAAK,CAACkB,IAAN,GAAe,KAAf,CAAuBD,cAAc,CAACmB,QAAQ,CAACpC,KAAD,CAAT,CAAd,CAAgCwB,MAAvD,CAAgExB,KAAK,CAACwB,MAAhF,CACAmB,GAAG,CAAGA,GAAG,CAACpC,GAAJ,CAAQ,SAAAwB,GAAG,CAAI,CACnB,GAAI/B,KAAK,CAACkB,IAAN,GAAe,OAAnB,CAA4B,CAC1Ba,GAAG,EAAI,GAAP,CAAY;AACb,CAED,MAAOA,CAAAA,GAAG,EAAI,OAAP,CAAiBA,GAAG,CAAG,KAAvB,UAAgC,CAACA,GAAG,CAAG,KAAP,EAAgB,KAAhD,CAA0D,GAA1D,CAAP,CACD,CANK,CAAN,CAMI;AAEJ,MAAOe,CAAAA,MAAM,CAAC,CAAC,OAASH,GAAG,CAAC,CAAD,CAAZ,CAAkB,OAASA,GAAG,CAAC,CAAD,CAA9B,CAAoC,OAASA,GAAG,CAAC,CAAD,CAAjD,EAAsDI,OAAtD,CAA8D,CAA9D,CAAD,CAAb,CACD,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASC,CAAAA,gBAAT,CAA0BC,UAA1B,CAAsCC,UAAtC,CAAkD,CACvD,GAAMC,CAAAA,IAAI,CAAGN,YAAY,CAACI,UAAD,CAAzB,CACA,GAAMG,CAAAA,IAAI,CAAGP,YAAY,CAACK,UAAD,CAAzB,CACA,MAAO,CAACpD,IAAI,CAACN,GAAL,CAAS2D,IAAT,CAAeC,IAAf,EAAuB,IAAxB,GAAiCtD,IAAI,CAACP,GAAL,CAAS4D,IAAT,CAAeC,IAAf,EAAuB,IAAxD,CAAP,CACD,CACD;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASC,CAAAA,KAAT,CAAerD,KAAf,CAAsBV,KAAtB,CAA6B,CAClCU,KAAK,CAAGiB,cAAc,CAACjB,KAAD,CAAtB,CACAV,KAAK,CAAGD,KAAK,CAACC,KAAD,CAAb,CAEA,GAAIU,KAAK,CAACkB,IAAN,GAAe,KAAf,EAAwBlB,KAAK,CAACkB,IAAN,GAAe,KAA3C,CAAkD,CAChDlB,KAAK,CAACkB,IAAN,EAAc,GAAd,CACD,CAED,GAAIlB,KAAK,CAACkB,IAAN,GAAe,OAAnB,CAA4B,CAC1BlB,KAAK,CAACwB,MAAN,CAAa,CAAb,aAAsBlC,KAAtB,EACD,CAFD,IAEO,CACLU,KAAK,CAACwB,MAAN,CAAa,CAAb,EAAkBlC,KAAlB,CACD,CAED,MAAO2C,CAAAA,cAAc,CAACjC,KAAD,CAArB,CACD,CACD;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASsD,CAAAA,MAAT,CAAgBtD,KAAhB,CAAuBuD,WAAvB,CAAoC,CACzCvD,KAAK,CAAGiB,cAAc,CAACjB,KAAD,CAAtB,CACAuD,WAAW,CAAGlE,KAAK,CAACkE,WAAD,CAAnB,CAEA,GAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,IAA8B,CAAC,CAAnC,CAAsC,CACpCrB,KAAK,CAACwB,MAAN,CAAa,CAAb,GAAmB,EAAI+B,WAAvB,CACD,CAFD,IAEO,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,IAA8B,CAAC,CAA/B,EAAoCrB,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,IAAgC,CAAC,CAAzE,CAA4E,CACjF,IAAK,GAAIa,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuBA,CAAC,EAAI,CAA5B,CAA+B,CAC7BlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,GAAmB,EAAIqB,WAAvB,CACD,CACF,CAED,MAAOtB,CAAAA,cAAc,CAACjC,KAAD,CAArB,CACD,CACD;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASwD,CAAAA,OAAT,CAAiBxD,KAAjB,CAAwBuD,WAAxB,CAAqC,CAC1CvD,KAAK,CAAGiB,cAAc,CAACjB,KAAD,CAAtB,CACAuD,WAAW,CAAGlE,KAAK,CAACkE,WAAD,CAAnB,CAEA,GAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,IAA8B,CAAC,CAAnC,CAAsC,CACpCrB,KAAK,CAACwB,MAAN,CAAa,CAAb,GAAmB,CAAC,IAAMxB,KAAK,CAACwB,MAAN,CAAa,CAAb,CAAP,EAA0B+B,WAA7C,CACD,CAFD,IAEO,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,IAA8B,CAAC,CAAnC,CAAsC,CAC3C,IAAK,GAAIa,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuBA,CAAC,EAAI,CAA5B,CAA+B,CAC7BlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,GAAmB,CAAC,IAAMlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,CAAP,EAA0BqB,WAA7C,CACD,CACF,CAJM,IAIA,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,IAAgC,CAAC,CAArC,CAAwC,CAC7C,IAAK,GAAIa,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAG,CAApB,CAAuBA,EAAC,EAAI,CAA5B,CAA+B,CAC7BlC,KAAK,CAACwB,MAAN,CAAaU,EAAb,GAAmB,CAAC,EAAIlC,KAAK,CAACwB,MAAN,CAAaU,EAAb,CAAL,EAAwBqB,WAA3C,CACD,CACF,CAED,MAAOtB,CAAAA,cAAc,CAACjC,KAAD,CAArB,CACD,CACD;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASyD,CAAAA,SAAT,CAAmBzD,KAAnB,CAA8C,IAApBuD,CAAAA,WAAoB,2DAAN,IAAM,CACnD,MAAOV,CAAAA,YAAY,CAAC7C,KAAD,CAAZ,CAAsB,GAAtB,CAA4BsD,MAAM,CAACtD,KAAD,CAAQuD,WAAR,CAAlC,CAAyDC,OAAO,CAACxD,KAAD,CAAQuD,WAAR,CAAvE,CACD","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\n\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}"]},"metadata":{},"sourceType":"module"}