{"ast":null,"code":"import _defineProperty from\"/Users/Sintez/WebstormProjects/todolist-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";export function isUnitless(value){return String(parseFloat(value)).length===String(value).length;}// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input){return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1]||'';}// Emulate the sass function \"unitless\"\nexport function toUnitless(length){return parseFloat(length);}// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize){return function(length,toUnit){var fromUnit=getUnit(length);// Optimize for cases where `from` and `to` units are accidentally the same.\nif(fromUnit===toUnit){return length;}// Convert input length to pixels.\nvar pxLength=toUnitless(length);if(fromUnit!=='px'){if(fromUnit==='em'){pxLength=toUnitless(length)*toUnitless(baseFontSize);}else if(fromUnit==='rem'){pxLength=toUnitless(length)*toUnitless(baseFontSize);}}// Convert length in pixels to the output unit\nvar outputLength=pxLength;if(toUnit!=='px'){if(toUnit==='em'){outputLength=pxLength/toUnitless(baseFontSize);}else if(toUnit==='rem'){outputLength=pxLength/toUnitless(baseFontSize);}else{return length;}}return parseFloat(outputLength.toFixed(5))+toUnit;};}export function alignProperty(_ref){var size=_ref.size,grid=_ref.grid;var sizeBelow=size-size%grid;var sizeAbove=sizeBelow+grid;return size-sizeBelow<sizeAbove-size?sizeBelow:sizeAbove;}// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid(_ref2){var lineHeight=_ref2.lineHeight,pixels=_ref2.pixels,htmlFontSize=_ref2.htmlFontSize;return pixels/(lineHeight*htmlFontSize);}/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */export function responsiveProperty(_ref3){var cssProperty=_ref3.cssProperty,min=_ref3.min,max=_ref3.max,_ref3$unit=_ref3.unit,unit=_ref3$unit===void 0?'rem':_ref3$unit,_ref3$breakpoints=_ref3.breakpoints,breakpoints=_ref3$breakpoints===void 0?[600,900,1200]:_ref3$breakpoints,_ref3$transform=_ref3.transform,transform=_ref3$transform===void 0?null:_ref3$transform;var output=_defineProperty({},cssProperty,\"\".concat(min).concat(unit));var factor=(max-min)/breakpoints[breakpoints.length-1];breakpoints.forEach(function(breakpoint){var value=min+factor*breakpoint;if(transform!==null){value=transform(value);}output[\"@media (min-width:\".concat(breakpoint,\"px)\")]=_defineProperty({},cssProperty,\"\".concat(Math.round(value*10000)/10000).concat(unit));});return output;}","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/node_modules/@mui/material/styles/cssUtils.js"],"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","size","grid","sizeBelow","sizeAbove","fontGrid","lineHeight","pixels","htmlFontSize","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"mappings":"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","sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"]},"metadata":{},"sourceType":"module"}