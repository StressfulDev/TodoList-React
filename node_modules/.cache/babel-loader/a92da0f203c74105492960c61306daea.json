{"ast":null,"code":"var _jsxFileName = \"/Users/Sintez/WebstormProjects/todolist-react/src/components/TodosList/TodosList.jsx\",\n    _s = $RefreshSig$();\n\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport { Button, createTheme, responsiveFontSizes, ThemeProvider } from '@mui/material';\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport IconButton from \"@mui/material/IconButton\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodosList = _ref => {\n  _s();\n\n  let {\n    todoList,\n    clearCompleted,\n    toggleEditState,\n    completeTask,\n    removeTask,\n    saveEditTask\n  } = _ref;\n  const [filtered, setFiltered] = useState(todoList);\n  useEffect(status => {\n    setFiltered(todoList);\n    todoFilter(status);\n  }, [todoList]);\n\n  const todoFilter = status => {\n    if (status === 'all') {\n      setFiltered(todoList);\n    } else {\n      let newTodo = [...todoList].filter(task => task.complete === status);\n      setFiltered(newTodo);\n    }\n  };\n\n  const todoItem = filtered.map(todo => {\n    return /*#__PURE__*/_jsxDEV(TodoItem, {\n      todo: todo,\n      completeState: todo.complete,\n      completeTask: completeTask,\n      removeTask: removeTask,\n      saveEditTask: saveEditTask,\n      toggleEditState: toggleEditState\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this);\n  });\n  const completedItems = todoList.filter(task => task.complete === true).map(todo => {\n    return /*#__PURE__*/_jsxDEV(TodoItem, {\n      todo: todo,\n      completeState: todo.complete,\n      completeTask: completeTask,\n      removeTask: removeTask,\n      saveEditTask: saveEditTask,\n      toggleEditState: toggleEditState\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this);\n  });\n  const activeItems = todoList.filter(task => task.complete === false).map(todo => {\n    return /*#__PURE__*/_jsxDEV(TodoItem, {\n      todo: todo,\n      completeState: todo.complete,\n      completeTask: completeTask,\n      removeTask: removeTask,\n      saveEditTask: saveEditTask,\n      toggleEditState: toggleEditState\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  });\n  let theme = createTheme({\n    typography: {\n      body1: {\n        width: '70%',\n        fontWeight: 500,\n        fontSize: '1.1em'\n      }\n    }\n  });\n  theme = responsiveFontSizes(theme);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        component: \"h6\",\n        gutterBottom: true,\n        children: todoItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        justifyContent: \"center\",\n        alignItems: 'flex-start',\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"text\",\n          size: 'large',\n          onClick: () => todoFilter('all'),\n          children: [\"All \", filtered.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"text\",\n          size: 'large',\n          onClick: () => todoFilter(false),\n          children: [\"Active \", activeItems.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"text\",\n          color: \"success\",\n          size: 'large',\n          onClick: () => todoFilter(true),\n          children: [\"Completed \", completedItems.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: clearCompleted,\n          \"aria-label\": \"delete\",\n          color: 'primary',\n          size: 'medium',\n          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n            fontSize: \"inherit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n};\n\n_s(TodosList, \"J7VsmHAW2HzXG94Kbb7sCI2ank8=\");\n\n_c = TodosList;\nexport default TodosList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosList\");","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/components/TodosList/TodosList.jsx"],"names":["TodoItem","Button","createTheme","responsiveFontSizes","ThemeProvider","Typography","Stack","DeleteIcon","IconButton","useEffect","useState","TodosList","todoList","clearCompleted","toggleEditState","completeTask","removeTask","saveEditTask","filtered","setFiltered","status","todoFilter","newTodo","filter","task","complete","todoItem","map","todo","id","completedItems","activeItems","theme","typography","body1","width","fontWeight","fontSize","length"],"mappings":"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","sourcesContent":["import TodoItem from \"./TodoItem/TodoItem\";\nimport {Button, createTheme, responsiveFontSizes, ThemeProvider} from '@mui/material';\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport IconButton from \"@mui/material/IconButton\";\nimport {useEffect, useState} from \"react\";\n\n\nconst TodosList = ({todoList, clearCompleted, toggleEditState, completeTask, removeTask, saveEditTask}) => {\n\n  const [filtered, setFiltered] = useState(todoList)\n\n  useEffect( (status) => {\n  setFiltered(todoList)\n    todoFilter(status)\n  }, [todoList]);\n\n\n  const todoFilter = status => {\n    if (status === 'all') {\n      setFiltered(todoList)\n    } else {\n      let newTodo = [...todoList].filter(task => task.complete === status)\n      setFiltered(newTodo)\n    }\n  }\n\n  const todoItem = filtered.map(todo => {\n    return (\n        <TodoItem key={todo.id}\n                  todo={todo}\n                  completeState={todo.complete}\n                  completeTask={completeTask}\n                  removeTask={removeTask}\n                  saveEditTask={saveEditTask}\n                  toggleEditState={toggleEditState}\n        />\n    );\n  })\n  const completedItems = todoList.filter(task => task.complete === true).map(todo => {\n    return (\n        <TodoItem key={todo.id}\n                  todo={todo}\n                  completeState={todo.complete}\n                  completeTask={completeTask}\n                  removeTask={removeTask}\n                  saveEditTask={saveEditTask}\n                  toggleEditState={toggleEditState}\n        />\n    );\n  })\n  const activeItems = todoList.filter(task => task.complete === false).map(todo => {\n    return (\n        <TodoItem key={todo.id}\n                  todo={todo}\n                  completeState={todo.complete}\n                  completeTask={completeTask}\n                  removeTask={removeTask}\n                  saveEditTask={saveEditTask}\n                  toggleEditState={toggleEditState}\n        />\n    );\n  })\n\n  let theme = createTheme({\n    typography: {\n      body1: {\n        width: '70%',\n        fontWeight: 500,\n        fontSize: '1.1em',\n      },\n    }\n  })\n  theme = responsiveFontSizes(theme);\n\n  return (\n      <div>\n        <ThemeProvider theme={theme}>\n          <Typography variant=\"h6\" component=\"h6\" gutterBottom>\n            {todoItem}\n          </Typography>\n          <Stack direction={\"row\"}\n                 justifyContent={\"center\"}\n                 alignItems={'flex-start'}\n                 spacing={3}\n          >\n            <Button variant=\"text\"\n                    size={'large'}\n                    onClick={() => todoFilter('all')}>\n              All {filtered.length}\n            </Button>\n            <Button variant=\"text\"\n                    size={'large'}\n                    onClick={() => todoFilter(false)}>\n              Active {activeItems.length}\n            </Button>\n            <Button variant=\"text\"\n                    color=\"success\"\n                    size={'large'}\n                    onClick={() => todoFilter(true)}>\n              Completed {completedItems.length}\n            </Button>\n            <IconButton onClick={clearCompleted}\n                        aria-label=\"delete\"\n                        color={'primary'}\n                        size={'medium'}>\n              <DeleteIcon fontSize=\"inherit\"/>\n            </IconButton>\n          </Stack>\n        </ThemeProvider>\n      </div>\n  );\n};\n\nexport default TodosList;"]},"metadata":{},"sourceType":"module"}