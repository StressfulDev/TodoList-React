{"ast":null,"code":"var _jsxFileName = \"/Users/Sintez/WebstormProjects/todolist-react/src/components/TodosList/TodosList.jsx\",\n    _s = $RefreshSig$();\n\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport { createTheme, responsiveFontSizes, ThemeProvider } from '@mui/material';\nimport Typography from \"@mui/material/Typography\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodosList = _ref => {\n  _s();\n\n  let {\n    toDoList,\n    clearCompleted,\n    handleEditState,\n    completeTask,\n    removeTask\n  } = _ref;\n  const [active, setactive] = useState('none');\n  const [completed, setCompleted] = useState('none');\n  const [all, setAll] = useState('block');\n  let toDoItem = toDoList.map((todo, index) => {\n    return /*#__PURE__*/_jsxDEV(TodoItem, {\n      todo: todo,\n      index: index,\n      completeTask: completeTask,\n      removeTask: removeTask,\n      handleEditState: handleEditState\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  });\n  let completedList = toDoList.filter(task => task.complete === false).map((todo, index) => {\n    return /*#__PURE__*/_jsxDEV(TodoItem, {\n      todo: todo,\n      index: index,\n      completeTask: completeTask,\n      removeTask: removeTask,\n      handleEditState: handleEditState\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  });\n\n  const activeState = () => {\n    setactive('block');\n    setCompleted('none');\n    setAll('none');\n  };\n\n  let theme = createTheme({\n    typography: {\n      body1: {\n        width: '70%',\n        fontWeight: 500,\n        fontSize: '1.1em'\n      }\n    }\n  });\n  theme = responsiveFontSizes(theme);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        display: completed,\n        className: 'hideActive',\n        variant: \"h6\",\n        component: \"h6\",\n        gutterBottom: true,\n        children: toDoItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        display: active,\n        variant: \"h6\",\n        component: \"h6\",\n        gutterBottom: true,\n        children: completedList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'btnClear',\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'btnClear',\n        onClick: classToggle,\n        children: \"Active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'btnClear',\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'btnClear',\n        onClick: clearCompleted,\n        children: \"Clear Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 11\n  }, this);\n};\n\n_s(TodosList, \"WmnecJk7PA3/zFSJ1YkgPn1uJDc=\");\n\n_c = TodosList;\nexport default TodosList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosList\");","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/components/TodosList/TodosList.jsx"],"names":["TodoItem","createTheme","responsiveFontSizes","ThemeProvider","Typography","useState","TodosList","toDoList","clearCompleted","handleEditState","completeTask","removeTask","active","setactive","completed","setCompleted","all","setAll","toDoItem","map","todo","index","id","completedList","filter","task","complete","activeState","theme","typography","body1","width","fontWeight","fontSize","classToggle"],"mappings":"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","sourcesContent":["import TodoItem from \"./TodoItem/TodoItem\";\nimport {createTheme, responsiveFontSizes, ThemeProvider} from '@mui/material';\nimport Typography from \"@mui/material/Typography\";\nimport {useState} from \"react\";\n\nconst TodosList = ({toDoList, clearCompleted, handleEditState, completeTask, removeTask}) => {\n\n      const [active, setactive] = useState('none');\n      const [completed, setCompleted] = useState('none');\n      const [all, setAll] = useState('block');\n\n      let toDoItem = toDoList.map((todo, index) => {\n        return (\n            <TodoItem key={todo.id}\n                      todo={todo}\n                      index={index}\n                      completeTask={completeTask}\n                      removeTask={removeTask}\n                      handleEditState={handleEditState}\n            />\n        );\n      })\n\n      let completedList = toDoList.filter(task => task.complete === false).map((todo, index) => {\n        return (\n            <TodoItem key={todo.id}\n                      todo={todo}\n                      index={index}\n                      completeTask={completeTask}\n                      removeTask={removeTask}\n                      handleEditState={handleEditState}\n            />\n        );\n      })\n\n\n      const activeState = () => {\n        setactive('block');\n        setCompleted('none')\n        setAll('none')\n      }\n\n\n      let theme = createTheme({\n        typography: {\n          body1: {\n            width: '70%',\n            fontWeight: 500,\n            fontSize: '1.1em',\n          },\n        }\n      })\n      theme = responsiveFontSizes(theme);\n\n      return (\n          <div>\n            <ThemeProvider theme={theme}>\n              <Typography display={completed} className={'hideActive'} variant=\"h6\" component=\"h6\" gutterBottom>\n                {toDoItem}\n              </Typography>\n              <Typography display={active} variant=\"h6\" component=\"h6\" gutterBottom>\n                {completedList}\n              </Typography>\n              <button className={'btnClear'}>\n                All\n              </button>\n              <button className={'btnClear'} onClick={classToggle}>\n                Active\n              </button>\n              <button className={'btnClear'}>\n                Completed\n              </button>\n              <button className={'btnClear'} onClick={clearCompleted}>\n                Clear Completed\n              </button>\n            </ThemeProvider>\n          </div>\n      );\n    }\n;\n\nexport default TodosList;"]},"metadata":{},"sourceType":"module"}