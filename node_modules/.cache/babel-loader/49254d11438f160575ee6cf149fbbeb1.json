{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import{formatMuiErrorMessage as _formatMuiErrorMessage}from\"@mui/utils\";import{isUnitless,convertLength,responsiveProperty,alignProperty,fontGrid}from'./cssUtils';export default function responsiveFontSizes(themeInput){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _options$breakpoints=options.breakpoints,breakpoints=_options$breakpoints===void 0?['sm','md','lg']:_options$breakpoints,_options$disableAlign=options.disableAlign,disableAlign=_options$disableAlign===void 0?false:_options$disableAlign,_options$factor=options.factor,factor=_options$factor===void 0?2:_options$factor,_options$variants=options.variants,variants=_options$variants===void 0?['h1','h2','h3','h4','h5','h6','subtitle1','subtitle2','body1','body2','caption','button','overline']:_options$variants;var theme=_extends({},themeInput);theme.typography=_extends({},theme.typography);var typography=theme.typography;// Convert between CSS lengths e.g. em->px or px->rem\n// Set the baseFontSize for your project. Defaults to 16px (also the browser default).\nvar convert=convertLength(typography.htmlFontSize);var breakpointValues=breakpoints.map(function(x){return theme.breakpoints.values[x];});variants.forEach(function(variant){var style=typography[variant];var remFontSize=parseFloat(convert(style.fontSize,'rem'));if(remFontSize<=1){return;}var maxFontSize=remFontSize;var minFontSize=1+(maxFontSize-1)/factor;var lineHeight=style.lineHeight;if(!isUnitless(lineHeight)&&!disableAlign){throw new Error(process.env.NODE_ENV!==\"production\"?\"MUI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\":_formatMuiErrorMessage(6));}if(!isUnitless(lineHeight)){// make it unitless\nlineHeight=parseFloat(convert(lineHeight,'rem'))/parseFloat(remFontSize);}var transform=null;if(!disableAlign){transform=function transform(value){return alignProperty({size:value,grid:fontGrid({pixels:4,lineHeight:lineHeight,htmlFontSize:typography.htmlFontSize})});};}typography[variant]=_extends({},style,responsiveProperty({cssProperty:'fontSize',min:minFontSize,max:maxFontSize,unit:'rem',breakpoints:breakpointValues,transform:transform}));});return theme;}","map":{"version":3,"sources":["/Users/Sintez/WebstormProjects/todolist-react/src/node_modules/@mui/material/styles/responsiveFontSizes.js"],"names":["_extends","formatMuiErrorMessage","_formatMuiErrorMessage","isUnitless","convertLength","responsiveProperty","alignProperty","fontGrid","responsiveFontSizes","themeInput","options","breakpoints","disableAlign","factor","variants","theme","typography","convert","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","maxFontSize","minFontSize","lineHeight","Error","process","env","NODE_ENV","transform","value","size","grid","pixels","cssProperty","min","max","unit"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n\n  const theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  const typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = value => alignProperty({\n        size: value,\n        grid: fontGrid({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}"]},"metadata":{},"sourceType":"module"}